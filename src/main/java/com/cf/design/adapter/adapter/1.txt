



适配器模式
1、定义： 将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法工作的两个类能够在一起工作
2、适配器模式又叫做变压器模式，属于包装模式的一种（装饰模式也属于包装模式）
3、适配器模式的三个角色：
        Adaptee源角色：需适配的角色
        Target目标角色：期待的目标接口。可以是接口、抽象类或具体的类
        Adapter适配器角色：适配器模式的核心，将源角色转换为目标角色
4、优点：
        ①可以让两个没有任何关系的类在一起运行（只要适配器能搞定他们就成）
        ②提高的类的复用度。适配器模式不会影响源角色在原系统中的使用
        ③灵活性好。类似一个灵活的组件，想用就用，不想用就删，不用修改其他代码
   缺点：
        过多的使用适配器模式，会使系统非常零乱，不易整体把握。比如，明明看到调用的是A接口，其实内部被适配
        成B接口的实现，一个系统出现过多这种情况，无异于一种灾难
5、适用场景：
        当你有动机去修改一个已经投产中的接口时，适配器模式可能是最适合你的模式。
        注意：适配器模式是一种“补偿模式”，不适合在设计阶段考虑，它通常用来解决接口不相容的问题，毕竟设计
              再完美，也会遇到需求变更
6、适配器模式分为三种：
        类适配器模式：类间继承
        对象适配器模式：对象的组合，或者说类的关联（这是和类适配器根本的区别）
        缺省适配器模式：也叫接口适配器模式，为接口提供缺省实现，然后直接在缺省实现上进行子类扩展（即适配器），
                        而不需要从接口上扩展（JAVA8之后接口可以用default方法，可以达到同样的效果）

7、类适配器模式和对象适配器模式对比：
        类适配器模式：使用的继承。优点是可以重定义一些源角色里的方法，也就是重写，这也是对象适配器模式的缺点；
                      缺点是源角色只能有一个（JAVA单继承）
        对象适配器模式：采用的对象组合。优点是可以把多个源角色适配到一起，包括源角色的子类，虽然不容易重定义
                       源角色里的方法，却很方便新增部分功能，更加灵活。（推荐使用，当然，还是看具体的业务场景）

